/* *************************************************************************** */
/*                                                                             */
/*  $$\      $$\           $$\                                                 */
/*  $$ | $\  $$ |          $$ |                                                */
/*  $$ |$$$\ $$ | $$$$$$\  $$$$$$$\   $$$$$$$\  $$$$$$\   $$$$$$\ $$\    $$\   */
/*  $$ $$ $$\$$ |$$  __$$\ $$  __$$\ $$  _____|$$  __$$\ $$  __$$\\$$\  $$  |  */
/*  $$$$  _$$$$ |$$$$$$$$ |$$ |  $$ |\$$$$$$\  $$$$$$$$ |$$ |  \__|\$$\$$  /   */
/*  $$$  / \$$$ |$$   ____|$$ |  $$ | \____$$\ $$   ____|$$ |       \$$$  /    */
/*  $$  /   \$$ |\$$$$$$$\ $$$$$$$  |$$$$$$$  |\$$$$$$$\ $$ |        \$  /     */
/*  \__/     \__| \_______|\_______/ \_______/  \_______|\__|         \_/      */
/*                                                                             */
/*   By: Panu Kangas, Ryan Boudwin, Patrik LÃ¥ng                                */
/*                                                                             */
/* *************************************************************************** */

#include "URLhandler.hpp"

URLhandler::URLhandler()
{

	m_decodeMap = {
    {"%20", " "},
    {"%21", "!"},
    {"%22", "\""},
    {"%23", "#"},
    {"%24", "$"},
    {"%25", "%"},
    {"%26", "&"},
    {"%27", "'"},
    {"%28", "("},
    {"%29", ")"},
    {"%2A", "*"},
    {"%2B", "+"},
    {"%2C", ","},
    {"%2F", "/"},
    {"%3A", ":"},
    {"%3B", ";"},
    {"%3D", "="},
    {"%3F", "?"},
    {"%40", "@"},
    {"%5B", "["},
    {"%5D", "]"},
    {"%5E", "^"},
    {"%5F", "_"},
    {"%60", "`"},
    {"%7B", "{"},
    {"%7C", "|"},
    {"%7D", "}"},
    {"%7E", "~"},
    {"%3C", "<"},
    {"%3E", ">"},
    {"%09", "\t"},
    {"%0A", "\n"},
    {"%0D", "\r"},
    {"%0C", "\f"},
    {"%0B", "\v"}
};

m_encodeMap = {
    {' ', "%20"},
    {'!', "%21"},
    {'\"', "%22"},
    {'#', "%23"},
    {'$', "%24"},
    {'%', "%25"},
    {'&', "%26"},
    {'\'', "%27"},
    {'(', "%28"},
    {')', "%29"},
    {'*', "%2A"},
    {'+', "%2B"},
    {',', "%2C"},
    {'/', "%2F"},
    {':', "%3A"},
    {';', "%3B"},
    {'=', "%3D"},
    {'?', "%3F"},
    {'@', "%40"},
    {'[', "%5B"},
    {']', "%5D"},
    {'^', "%5E"},
    {'_', "%5F"},
    {'`', "%60"},
    {'{', "%7B"},
    {'|', "%7C"},
    {'}', "%7D"},
    {'~', "%7E"},
    {'<', "%3C"},
    {'>', "%3E"},
    {'\t', "%09"},
    {'\n', "%0A"},
    {'\r', "%0D"},
    {'\f', "%0C"},
    {'\v', "%0B"}
};
}

URLhandler::~URLhandler()
{	
}


void URLhandler::decode(std::string &str)
{
	for (size_t i = 0; i < str.size(); ++i)
	{
		if (str[i] == '%')
		{
			std::string key = str.substr(i, 3);
			auto it = m_decodeMap.find(key);
			if (it != m_decodeMap.end())
			{
				str.erase(i, 3);
				str.insert(i, it->second);
			}
		}
	}
}

void URLhandler::encode(std::string &str)
{
	for (size_t i = 0; i < str.size(); ++i)
	{
		auto it = m_encodeMap.find(str[i]);
		if (it != m_encodeMap.end())
		{
				str.erase(i, 1);
				str.insert(i, it->second);
		}
	}
}
